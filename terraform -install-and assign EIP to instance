Terraform installation

step 1: launch an EC2 instance (amazon Linux)
step 2: Run the following command for Terraform installation or refer the below website link 
(https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli) 
      ```shell
    sudo yum install -y yum-utils
    sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    sudo yum -y install terraform
    terraform --version
    ```
Step 3: Setup AWS CLI and Authenticate

    1. Install AWS CLI by running the command:
    
    ```shell
    sudo yum install -y aws-cli
    ```

    2. Configure AWS CLI by running the command:
    
    ```shell
    aws configure
    ```

    3. Enter your AWS Access Key ID, Secret Access Key, default region name, and output format when prompted.(create IAM user and give administrator access)
    4. Validate the connection setup by running the command:
    
    ```shell
    aws sts get-caller-identity
    ```
Step 4: Deploy Infrastructure-as-Code (IaC)

    1. Create a `main.tf` file with the desired EC2 configuration using the `vi` editor:
    
    ```shell
    vi main.tf
    ```
    
    2. Add the following Terraform code to the `main.tf` file:

      provider "aws" {
        region = "ap-south-1"   # Replace with your desired AWS region
      }
      
      resource "aws_instance" "my-ec2" {
        ami           = "ami-006935d9a6773e4ec"  # Your desired AMI
        instance_type = "t2.micro"
        # Add other necessary configurations like subnet_id, security_group_ids, etc if required.

        tags = {
          Name = "my-ec2-instance"
        }
      }
      
      resource "aws_eip" "elasticip" {
        instance = aws_instance.my-ec2.id
      }


  3. Initialize the Terraform configuration by running:
  
  ```shell
  terraform init
  ```
  
  4. Validate the Terraform configuration by running:
  
  ```shell
  terraform validate
  ```
  
  5. Preview the execution plan by running:
  
  ```shell
  terraform plan
  ```
  
  6. Deploy the infrastructure by running:
  
  ```shell
  terraform apply
  ```

  7. Run the following command to destroy the resources:
  
  ```shell
  terraform destroy
  ```


****Deploy Infrastructure-as-Code (IaC) - VPC using Terraform*****

*****To create other deployments- VPC, Subnets, Routtable etc Add the following Terraform code to the `main.tf` file:*****

# main.tf

provider "aws" {
  region = "ap-south-1"  # Replace with your desired AWS region
}

resource "aws_vpc" "my_vpc" {
  cidr_block       = "10.0.0.0/16"
  enable_dns_hostnames = true
  tags = {
    Name = "md-devops-trf-vpc"
  }
}

resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "10.0.0.0/24"
  map_public_ip_on_launch = true
  tags = {
    Name = "public-subnet"
  }
}

resource "aws_security_group" "nginx_sg" {
  name        = "nginx-sg"
  description = "Security group for Nginx"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "my_ec2" {
  ami           = "ami-006935d9a6773e4ec"  # Replace with your desired AMI ID
  instance_type = "t2.micro"  # Use default instance type

  subnet_id                  = aws_subnet.public_subnet.id
  key_name                   = "devopsjune"  # Replace with the name of your key pair
  vpc_security_group_ids     = [aws_security_group.nginx_sg.id]
  associate_public_ip_address = true

  tags = {
    Name = "my-ec2-instance"
  }
}

resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }

  tags = {
    Name = "public-route-table"
  }
}

resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "my-internet-gateway"
  }
}

resource "aws_route_table_association" "public_subnet_association" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_route_table.id
}
